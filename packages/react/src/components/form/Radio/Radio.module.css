.container {
  --fds-radio-size: 1.75rem;
  --fds-radio-focus-border-width: 3px;
  --fds-radio-background: var(--fds-semantic-background-default);
  --fds-radio-border-color: var(--fds-semantic-border-input-default);
  --fds-radio-border__hover: 0 0 0 6px var(--fds-semantic-surface-info-subtle-hover);

  position: relative;
}

.label {
  min-height: var(--fds-sizing-10);
  min-width: min-content;
  display: inline-flex;
  flex-direction: row;
  gap: var(--fds-spacing-1);
  align-items: center;
  cursor: pointer;
}

/* Radio */
.label::before {
  content: '';
  width: var(--fds-radio-size);
  height: var(--fds-radio-size);
  box-shadow: inset 0 0 0 2px var(--fds-radio-border-color);
  background: var(--fds-radio-background);
  border-radius: 50%;
  flex-shrink: 0;
  margin-right: 6px;
  margin-block: 6px;
}

.description {
  padding-left: calc(var(--fds-radio-size) + 12px + var(--fds-spacing-1));
  margin-top: calc(var(--fds-spacing-2) * -1);
  color: var(--fds-semantic-text-neutral-subtle);
}

.input {
  position: absolute;
  width: 2.75rem;
  height: 2.75rem;
  z-index: 1;
  opacity: 0;
  cursor: pointer;
  margin: 0;
}

.disabled > .input,
.disabled > .label,
.disabled > .label::before {
  cursor: not-allowed;
}

.disabled > .label,
.disabled > .label::before,
.disabled > .description {
  opacity: var(--fds-opacity-disabled);
}

.input:focus-visible + .label::before {
  outline: var(--fds-radio-focus-border-width) solid var(--fds-semantic-border-focus-outline);
  box-shadow: inset 0 0 0 var(--fds-radio-focus-border-width) var(--fds-semantic-border-focus-boxshadow), inset 0 0 0 6px var(--fds-radio-background);
}

.input:checked + .label::before {
  --fds-radio-border-color: var(--fds-semantic-border-input-hover);

  background: var(--fds-radio-border-color);
}

.readonly > .input + .label::before {
  --fds-radio-border-color: var(--fds-semantic-border-neutral-subtle);
  --fds-radio-background: var(--fds-semantic-surface-neutral-subtle);
}

.input:checked:not(:focus-visible) + .label::before {
  box-shadow: inset 0 0 0 2px var(--fds-radio-border-color), inset 0 0 0 6px var(--fds-radio-background);
}

.readonly > .input,
.readonly > .label {
  cursor: default;
}

.readonly > .input:checked + .label::before {
  background: var(--fds-semantic-border-neutral-default);
}

.error > .input:not(:disabled, :focus-visible) + .label::before {
  --fds-radio-border-color: var(--fds-semantic-border-danger-default);
}

/* Only use hover for non-touch devices to prevent sticky-hovering
  "input:not(:read-only)" does not work so using ".container:not(.readonly) >" instead */
@media (hover: hover) and (pointer: fine) {
  .container:not(.readonly, .disabled) > .label:hover,
  .container:not(.readonly, .disabled) > .input:hover + .label {
    color: var(--fds-semantic-text-action-hover);
  }

  .container:not(.readonly, .disabled) > .input:hover:not(:checked) + .label::before {
    --fds-radio-border-color: var(--fds-semantic-border-input-hover);

    box-shadow: var(--fds-radio-border__hover), inset 0 0 0 2px var(--fds-radio-border-color);
  }

  .container:not(.readonly, .disabled) > .input:hover:checked + .label::before {
    --fds-radio-border-color: var(--fds-semantic-border-input-hover);

    box-shadow: var(--fds-radio-border__hover), inset 0 0 0 2px var(--fds-radio-border-color), inset 0 0 0 6px var(--fds-radio-background);
  }

  .container:not(.readonly, .disabled) > .input:hover:checked:focus-visible + .label::before {
    box-shadow: var(--fds-radio-border__hover), inset 0 0 0 var(--fds-radio-focus-border-width) var(--fds-semantic-border-focus-boxshadow),
      inset 0 0 0 6px var(--fds-radio-background);
  }
}

/** Sizing */

.small,
.small .label {
  min-height: var(--fds-sizing-8);
}

.medium,
.medium .label {
  min-height: var(--fds-sizing-10);
}

.large,
.large .label {
  min-height: var(--fds-sizing-12);
}

.small {
  --fds-radio-size: 1.5rem;

  min-width: var(--fds-sizing-8);
}

.small .input {
  left: -0.25rem;
  top: -0.25rem;
}

.medium {
  --fds-radio-size: 1.75rem;

  min-width: var(--fds-sizing-10);
}

.medium .input {
  left: 0;
  top: 0;
}

.large {
  --fds-radio-size: 2rem;

  min-width: var(--fds-sizing-12);
}

.large .input {
  left: 0;
  top: 0.25rem;
}
